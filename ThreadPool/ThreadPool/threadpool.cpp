#include "threadpool.h"

#include <iostream>
#include <chrono>
#include <thread>

const int TASK_MAX_THRESHHOLD = INT32_MAX;
const int THREAD_MAX_THRESHHOLD = 100;
const int THREAD_MAX_IDLE_TIME = 60;  // 单位:秒


ThreadPool::ThreadPool()
	: initThreadSize_(0)
	, idleThreadSize_(0)
	, threadSizeThreshHold_(THREAD_MAX_THRESHHOLD)
	, curThreadSize_(0)
	, taskSize_(0)
	, taskQueMaxThreshHold_(TASK_MAX_THRESHHOLD)
	, poolMode_(PoolMode::MODE_FIXED)
	, isPoolRunning_(false)
{

}

ThreadPool::~ThreadPool()
{
	isPoolRunning_ = false;

	// 等待线程池里面所有线程返回，有两种状态：阻塞 & 正在执行任务
	std::unique_lock<std::mutex> lock(taskQueMtx_);
	notEmpty_.notify_all();
	exitCond_.wait(lock, [&]()->bool {return threads_.size() == 0;});
}

void ThreadPool::setMode(PoolMode mode)
{
	if (checkRunningState()) return;
	poolMode_ = mode;
}

void ThreadPool::setThreadSizeThreshHold(int threshhold)
{
	if (checkRunningState()) return;
	if (poolMode_ != PoolMode::MODE_CACHED) return;
	threadSizeThreshHold_ = threshhold;
}

void ThreadPool::setTaskQueMaxThreshHold(int threshhold)
{
	if (checkRunningState()) return;
	taskQueMaxThreshHold_ = threshhold;
}

Result ThreadPool::submitTask(std::shared_ptr<Task> sp)
{
	// 获取锁
	std::unique_lock<std::mutex> lock(taskQueMtx_);

	// 线程的通信，等待任务队列有空余
	// 用户提交任务最长不能阻塞超过1s，否则判断提交任务失败，返回
	if (!notFull_.wait_for(lock, std::chrono::seconds(1), 
		[&]()->bool {return taskQue_.size() < taskQueMaxThreshHold_;}))
	{
		// 表示notFull_等待1s，条件依然没有满足，超时返回
		std::cerr << "task queue is full, submit task failed." << std::endl;
		return Result(sp, false);
	}

	// 如果有空余，把任务放入任务队列
	taskQue_.emplace(sp);
	taskSize_++;

	// notEmpty_通知，分配线程执行任务
	notEmpty_.notify_all();

	// cached模式 任务处理比较紧急 场景：小而快的任务 需要根据任务数量和空闲线程数量，判断是否需要创建新线程
	if (poolMode_ == PoolMode::MODE_CACHED && taskSize_ > idleThreadSize_ && curThreadSize_ < threadSizeThreshHold_)
	{
		// 创建新线程
		std::cout << ">> create new thread <<<" << std::endl;
		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
		//threads_.emplace_back(std::move(ptr));
		int threadId = ptr->getId();
		threads_.emplace(threadId, std::move(ptr));
		threads_[threadId]->start();  // 启动线程
		curThreadSize_++;
		idleThreadSize_++;
	}

	// 返回任务的Result对象
	return Result(sp);
}

void ThreadPool::start(int initThreadSize)
{
	// 设置线程池运行状态
	isPoolRunning_ = true;

	// 记录初始线程个数
	this->initThreadSize_ = initThreadSize;
	this->curThreadSize_ = initThreadSize;

	// 创建线程对象
	for (int i = 0; i < initThreadSize_; i++)
	{
		// 创建thread线程对象的时候，把线程函数给到thread线程对象
		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));  // 函数绑定器
		// threads_.emplace_back(std::move(ptr));  // unique_ptr只支持右值拷贝和赋值，禁止左值拷贝和赋值, unique_ptr(const unique_ptr&) = delete;unique_ptr& operator=(const unique_ptr&) = delete;
		int threadId = ptr->getId();
		threads_.emplace(threadId, std::move(ptr));
	}

	// 启动线程对象
	for (int i = 0; i < initThreadSize_; i++)
	{
		threads_[i]->start();
		idleThreadSize_++;     // 记录初始空闲线程数量
	}
}

void ThreadPool::threadFunc(int threadId)
{
	auto lastTime = std::chrono::high_resolution_clock().now();

	// 所有任务必须执行完，线程池才可以回收所有线程资源
	for (;;)
	{
		std::shared_ptr<Task> task;
		{
			// 先获取锁
			std::unique_lock<std::mutex> lock(taskQueMtx_);

			std::cout << "tid:" << std::this_thread::get_id() << " 尝试获取任务..." << std::endl;

			// cached模式下，有可能已经创建了很多线程，但是空闲时间超过60s，应该把多余线程结束回收（超过initThreadSize_的线程要回收）
			// (当前时间 - 上一次线程执行时间) > 60s
			// 每一秒返回一次 怎么区分：超时返回？还是有任务待执行返回
			// 锁+ 双重判断
			while (taskQue_.size() == 0)
			{
				// 线程池要结束，回收线程资源
				if (!isPoolRunning_)
				{
					threads_.erase(threadId);
					exitCond_.notify_all();
					std::cout << "threadid: " << std::this_thread::get_id() << " exit!" << std::endl;
					return;  // 线程函数结束，线程结束
				}

				if (poolMode_ == PoolMode::MODE_CACHED)
				{
					// 条件变量，超时返回
					if (std::cv_status::timeout == notEmpty_.wait_for(lock, std::chrono::seconds(1)))
					{
						auto now = std::chrono::high_resolution_clock().now();
						auto dur = std::chrono::duration_cast<std::chrono::seconds>(now - lastTime);
						if (dur.count() >= THREAD_MAX_IDLE_TIME && curThreadSize_ > initThreadSize_)
						{
							// 开始回收当前线程
							// 记录线程数量的相关变量的值修改
							// 把线程对象从线程列表容器中删除
							threads_.erase(threadId);
							curThreadSize_--;
							idleThreadSize_--;
							std::cout << "threadid: " << std::this_thread::get_id() << " exit." << std::endl;
							return;
						}
					}
				}
				else
				{
					// 等待notEmpty_条件
					notEmpty_.wait(lock);
				}

				// 线程池要结束，回收线程资源
				//if (!isPoolRunning_)
				//{
				//	threads_.erase(threadId);
				//	std::cout << "threadid: " << std::this_thread::get_id() << " exit." << std::endl;
				//	exitCond_.notify_all();
				//	return;  // 结束线程函数，就是结束当前线程了
				//}
			}

			idleThreadSize_--;

			std::cout << "tid:" << std::this_thread::get_id() << " 获取任务成功..." << std::endl;

			// 从任务队列取出一个任务
			task = taskQue_.front();
			taskQue_.pop();
			taskSize_--;

			// 如果依然有剩余任务，继续通知其它线程执行任务
			if (taskQue_.size() > 0) notEmpty_.notify_all();

			// 取出任务后，进行通知
			notFull_.notify_all();

		}  // 执行任务前，将锁释放掉，避免影响其它线程正常获取锁

		// 当前线程负责执行这个任务
		if (task != nullptr)
		{
			//task->run();
			task->exec();  // 调用此处自动完成返回值赋值
		}

		idleThreadSize_++;
		lastTime = std::chrono::high_resolution_clock().now();  // 更新线程执行完任务的时间
	}
}

bool ThreadPool::checkRunningState() const
{
	return isPoolRunning_;
}

/*************************************************
* Thread类实现
*************************************************/

int Thread::generateId_ = 0;

Thread::Thread(ThreadFunc func)
	: func_(func)
	, threadId_(generateId_++)
{
}

Thread::~Thread()
{
}

void Thread::start()
{
	// 创建一个线程并执行线程函数
	std::thread t(func_, threadId_);
	t.detach();  // 设置分离线程，线程对象出作用域析构以后不影响线程函数执行
}

int Thread::getId() const
{
	return threadId_;
}


/*************************************************
* Result类实现
*************************************************/
Result::Result(std::shared_ptr<Task> task, bool isValid)
	: task_(task)
	, isValid_(isValid)
{
	task_->setResult(this);
}

// 线程里执行
void Result::setVal(Any any)
{
	// 存储task的返回值
	this->any_ = std::move(any);
	sem_.post();  // 已经获取的任务的返回值，增加信号量资源
}

// 用户调用
Any Result::get()
{
	if (!isValid_) return "";
	sem_.wait();  // task任务如果没有执行完，这里会阻塞用户线程

	return std::move(any_);
}

/*************************************************
* Task类方法实现
*************************************************/
Task::Task()
	: result_(nullptr)
{
}

void Task::exec()
{
	if (result_ != nullptr)
	{
		result_->setVal(run());
	}
}

void Task::setResult(Result* res)
{
	result_ = res;
}
